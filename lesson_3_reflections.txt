When would you want to use a remote repository rather than keeping all your
work local?

Using a remote repository is useful for collaborative projects with multiple
users working on changes separately and remotely. The remote repository will
allow users to sync with the master repository to update files without losing
progress on any edits in the local folder.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

If Git automatically makes updates to the remote repository, it could
overwrite edits that were made locally but not yet pushed to the remote
repository.

Describe the differences between forks, clones, and branches. When would you
use one instead of another?

Forks are cloned copies of GitHub repositories that live on GitHub's servers.
A fork can be maintained separately from it's origin, but can also be used to
recommend changes to that original repository. Clones exist locally and can
be GitHub repositories or other directories. Like forks, they are copied sets
of files and can be used to push updates back to the original files or as
simply a starting point. Clones can be used instead of forks if the workflow
does not involve GitHub. Branches are used within a single repository and
occur when a new commit is added as an off-shoot of the current linear path
of the commit history. Branches help to separate work by features so that
simultaneous changes can be made without impacting the master file. This is
a good method to use when all of the users working on a file are known
contributors, as may be the case within an organization.

What is the benefit of having a copy of the last known state of the remote
stored locally?

The local copy of the remote serves as a reference for the changes being made
to that remote. This can serve as a point of comparison for the local files
to prevent them from becoming out-of-sync.

How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

Without using Git or GitHub, collaboration would be much harder. I think
frequent meetings would be necessary to understand what work has happened in
areas outside of my focus, especially those that may impact my work. It would
be easier to simply focus on what I am doing, but the methods for saving the
changes I make in logical steps would be sorely missed. Though Git and GitHub
are an added complication to the workflow, the benefits to be gained from these
tools will make up for any challenges with that first revisit to an older
commit when something becomes broken.

When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?

Making changes in a separate branch is useful for work that dramatically alters
the functionality of the code because the master branch stays in working order
while these alterations are made. This is especially important for a shared
project where users are dependent on a working master branch. If the project is
an individual effort, then branching becomes less important. It still can be
used in this case for the sake of organization.
