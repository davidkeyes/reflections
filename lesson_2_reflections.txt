What happens when you initialize a repository? Why do you need to do it?

Initializing the repository enables tracking with Git. Without this step, there
will be no record of the changes made to files in the given directory.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is a middle ground for changes that exist in the directory but
have not been committed to the repository. This provides a place for changes to
exist apart from other changes, allowing to pick which changes will be part of
a given commit without deleting any other progress.

How can you use the staging area to make sure you have one commit per logical
change?

The staging area can be used to compare files to the previous commit and to
the working directory in order to see if the changes all fit together as one
logical change before they are committed.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

If I wanted to explore introducing a new feature to my code, using a branch
would allow me to do this in phases without compromising the existing,
functional files. I could do my experimentation and still have a working
version of the code, no matter how wild my experiments may be.

How do the diagrams help you visualize the branch structure?

The diagrams make it easy to trace back through commits when there is a
complicated branch structure.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging branches combines all previous commits in the branches into one single
master branch. In the diagram, these two branches existed separately with
commits made at different times. We show this with a convergence of these
separate threads to indicate that those histories still exist but can be traced
back from a single commit.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing
merges manually?

While automatic merging is handy when there are no conflicts and can save
effort when there are no conflicts in the code, though this may lead to excess
or duplicative code. When a conflict is present, a manual check is the only
sufficient way to merge. 
